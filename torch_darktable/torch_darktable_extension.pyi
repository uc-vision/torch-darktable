import torch
from typing import Dict, Union


class PPG:
    def __init__(self, device: torch.device, width: int, height: int,
                 filters: int, median_threshold: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...


class RCD:
    def __init__(self, device: torch.device, width: int, height: int,
                 filters: int, input_scale: float = ..., output_scale: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...


class PostProcess:
    def __init__(self, device: torch.device, width: int, height: int,
                 filters: int, color_smoothing_passes: int = ..., *,
                 green_eq_local: bool = ..., green_eq_global: bool = ...,
                 green_eq_threshold: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...


class Laplacian:
    def __init__(self, device: torch.device, width: int, height: int,
                 num_gamma: int = ..., sigma: float = ..., shadows: float = ...,
                 highlights: float = ..., clarity: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...
    def get_parameters(self) -> Dict[str, Union[int, float]]: ...
    def set_sigma(self, sigma: float) -> None: ...
    def set_shadows(self, shadows: float) -> None: ...
    def set_highlights(self, highlights: float) -> None: ...
    def set_clarity(self, clarity: float) -> None: ...


class Bilateral:
    def __init__(self, device: torch.device, width: int, height: int,
                 sigma_s: float = ..., sigma_r: float = ..., detail: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...
    def get_parameters(self) -> Dict[str, Union[int, float]]: ...
    def set_sigma_s(self, sigma_s: float) -> None: ...
    def set_sigma_r(self, sigma_r: float) -> None: ...
    def set_detail(self, detail: float) -> None: ...


def compute_luminance(rgb: torch.Tensor) -> torch.Tensor: ...
def modify_luminance(rgb: torch.Tensor, new_luminance: torch.Tensor) -> torch.Tensor: ...


def rgb_to_xyz(rgb: torch.Tensor) -> torch.Tensor: ...
def xyz_to_lab(xyz: torch.Tensor) -> torch.Tensor: ...
def lab_to_xyz(lab: torch.Tensor) -> torch.Tensor: ...
def xyz_to_rgb(xyz: torch.Tensor) -> torch.Tensor: ...


def rgb_to_lab(rgb: torch.Tensor) -> torch.Tensor: ...
def lab_to_rgb(lab: torch.Tensor) -> torch.Tensor: ...


