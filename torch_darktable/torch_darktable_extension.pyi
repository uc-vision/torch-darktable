import torch


# Demosaicing classes
class PPG:
    def __init__(self, device: torch.device, width: int, height: int, filters: int, median_threshold: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...
    median_threshold: float

class RCD:
    def __init__(self, device: torch.device, width: int, height: int, filters: int, input_scale: float = ..., output_scale: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...
    input_scale: float
    output_scale: float

class PostProcess:
    def __init__(self, device: torch.device, width: int, height: int, filters: int, color_smoothing_passes: int = ..., green_eq_local: bool = ..., green_eq_global: bool = ..., green_eq_threshold: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...
    color_smoothing_passes: int
    green_eq_local: bool
    green_eq_global: bool
    green_eq_threshold: float

# 12-bit encoding/decoding functions (internal - use high-level API instead)
def encode12_u16(image: torch.Tensor, ids_format: bool = ...) -> torch.Tensor: ...
def encode12_float(image: torch.Tensor, ids_format: bool = ..., scaled: bool = ...) -> torch.Tensor: ...
def decode12_float(packed_data: torch.Tensor, ids_format: bool = ..., scaled: bool = ...) -> torch.Tensor: ...
def decode12_half(packed_data: torch.Tensor, ids_format: bool = ..., scaled: bool = ...) -> torch.Tensor: ...
def decode12_u16(packed_data: torch.Tensor, ids_format: bool = ...) -> torch.Tensor: ...

# Local contrast classes
class Laplacian:
    def __init__(self, device: torch.device, width: int, height: int, num_gamma: int = ..., sigma: float = ..., shadows: float = ..., highlights: float = ..., clarity: float = ...) -> None: ...
    def process(self, input: torch.Tensor) -> torch.Tensor: ...
    sigma: float
    shadows: float
    highlights: float
    clarity: float

class Bilateral:
    def __init__(self, device: torch.device, width: int, height: int, sigma_s: float = ..., sigma_r: float = ...) -> None: ...
    def process_contrast(self, luminance: torch.Tensor, detail: float) -> torch.Tensor: ...
    def process_denoise(self, luminance: torch.Tensor, amount: float = ...) -> torch.Tensor: ...
    sigma_s: float
    sigma_r: float

# Tone mapping functions
def compute_image_metrics(image: torch.Tensor, stride: int = ..., min_gray: float = ...) -> torch.Tensor: ...
def reinhard_tonemap(image: torch.Tensor, metrics: torch.Tensor, gamma: float, intensity: float, light_adapt: float) -> torch.Tensor: ...
def aces_tonemap(image: torch.Tensor, gamma: float) -> torch.Tensor: ...
def compute_image_bounds(image: torch.Tensor, stride: int) -> torch.Tensor: ...

# Color conversion functions
def compute_luminance(rgb: torch.Tensor) -> torch.Tensor: ...
def modify_luminance(rgb: torch.Tensor, new_luminance: torch.Tensor) -> torch.Tensor: ...
def rgb_to_xyz(rgb: torch.Tensor) -> torch.Tensor: ...
def xyz_to_lab(xyz: torch.Tensor) -> torch.Tensor: ...
def lab_to_xyz(lab: torch.Tensor) -> torch.Tensor: ...
def xyz_to_rgb(xyz: torch.Tensor) -> torch.Tensor: ...
def rgb_to_lab(rgb: torch.Tensor) -> torch.Tensor: ...
def lab_to_rgb(lab: torch.Tensor) -> torch.Tensor: ...


